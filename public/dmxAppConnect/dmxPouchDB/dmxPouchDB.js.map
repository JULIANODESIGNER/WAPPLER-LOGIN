{"version":3,"sources":["core/pouchdb.js","actions/pouchdb.js","components/pouchdb.js","components/pouchdbView.js","components/pouchdbDetail.js"],"names":["dmx","databases","pouchdb","Map","setup","name","options","this","has","db","PouchDB","adapter","setMaxListeners","set","info","then","console","log","get","Startup","Promise","resolve","reject","document","addEventListener","Object","keys","length","debug","all","filter","database","type","map","version","upgrade","remote","replicate","from","sync","live","retry","on","change","dispatchEvent","CustomEvent","detail","err","catch","warn","doc","dbVersion","toVersion","bulkDocs","updates","concat","_id","result","res","status","id","find","update","put","error","normalize","rows","row","wheres","validate","rule","operator","a","data","column","b","value","includes","String","startsWith","endsWith","condition","rules","_rule","valid","orders","sort","order","desc","direction","toLowerCase","columns","Array","isArray","assign","alias","distinct","Set","paged","offset","limit","includePageInfo","total","Number","slice","undefined","page","first","prev","next","last","Math","ceil","current","floor","Actions","parsed","parse","connection","sql","table","allDocs","startkey","endkey","include_docs","values","Date","now","affected","ok","identity","docs","results","_deleted","_rev","docId","attachments","getAttachment","blob","fileUtils","blobToDataURL","dataURL","parseDataURL","putAttachment","removeAttachment","Component","attributes","default","methods","replicateFrom","_db","replicateTo","to","events","Event","init","event","props","_initDatabase","performUpdate","updatedProps","destroy","_changes","cancel","changes","since","initialData","pages","items","dir","collection","pagesize","sorton","sortdir","enum","select","_updatePage","prop","updated","_docs","_items","_updateFilter","_updateDocs","_updateData","_filterEffect","nextTick","effect","DataScope","max","rev","size","stale","docid","Boolean","autoupdate","refresh","_getDoc","_cancelChanges","doc_ids"],"mappings":";;;;;;AAAAA,IAAAC,UAAAD,IAAAC,WAAA,CAAA,EAEAD,IAAAE,QAAA,CAEAD,UAAA,IAAAE,IAEAC,MAAAC,EAAAC,EAAA,CAAA,GACA,IAAAC,KAAAN,UAAAO,IAAAH,GAAA,CACA,MAAAI,EAAA,IAAAC,QAAAL,EAAA,IACAC,EACAK,QAAA,cAOA,OALAF,EAAAG,gBAAA,GACAL,KAAAN,UAAAY,IAAAR,EAAAI,GACAA,EAAAK,OAAAC,MAAAD,IACAE,QAAAC,IAAA,YAAAZ,IAAAS,EAAA,IAEAL,CACA,CAEA,OAAAF,KAAAN,UAAAiB,IAAAb,EACA,EAEAa,IAAAb,GACA,OAAAE,KAAAH,MAAAC,EACA,GAIAL,IAAAmB,QAAA,IAAAC,SAAA,CAAAC,EAAAC,KAEAC,SAAAC,iBAAA,mBAAAH,EAAA,IACAN,MAAA,KACA,GAAAf,IAAAC,WAAAwB,OAAAC,KAAA1B,IAAAC,WAAA0B,OAKA,OAJA3B,IAAA4B,OACAZ,QAAAC,IAAA,iBAAAjB,IAAAC,WAGAmB,QAAAS,IAAAJ,OAAAC,KAAA1B,IAAAC,WAAA6B,QAAAC,GACA,YAAA/B,IAAAC,UAAA8B,GAAAC,OACAC,KAAAF,IACA,MAAAG,QAAAA,EAAAC,QAAAA,EAAAC,OAAAA,EAAA9B,QAAAA,GAAAN,IAAAC,UAAA8B,GACAtB,EAAAT,IAAAE,QAAAE,MAAA2B,EAAA,CAAAzB,YAEA,OAAA8B,GACApC,IAAA4B,OACAZ,QAAAC,IAAA,GAAAc,oBAAAK,KAGA3B,EAAA4B,UAAAC,KAAAF,GAAArB,MAAA,KACAf,IAAA4B,OACAZ,QAAAC,IAAA,GAAAc,iCAGAtB,EAAA8B,KAAAH,EAAA,CACAI,MAAA,EACAC,OAAA,IACAC,GAAA,UAAAC,IACApB,SAAAqB,cAAA,IAAAC,YAAA,eAAA,CAAAC,OAAA,CAAAf,WAAAY,aACA3C,IAAA4B,OACAZ,QAAAC,IAAA,GAAAc,gBAAAY,EACA,IACAD,GAAA,SAAAK,IACAxB,SAAAqB,cAAA,IAAAC,YAAA,gBAAA,CAAAC,OAAA,CAAAf,WAAAgB,UACA/C,IAAA4B,OACAZ,QAAAC,IAAA,GAAAc,eAAAgB,EACA,GACA,IACAC,OAAAD,IACA/B,QAAAiC,KAAA,yBAAAlB,KAAAgB,EAAA,MAGA/C,IAAA4B,OACAZ,QAAAC,IAAA,WAAAc,gBAAAG,KAGAzB,EAAAS,IAAA,kBAAAH,MAAAmC,GAAAA,EAAAhB,UAAAc,OAAAD,GAAA,IAAAhC,MAAAoC,IACAnD,IAAA4B,OACAZ,QAAAC,IAAA,GAAAc,qBAAAoB,KAGA/B,QAAAS,IAAAM,EAAAF,KAAAE,IACA,KAAAgB,GAAAhB,EAAAiB,WAWA,OAJApD,IAAA4B,OACAZ,QAAAC,IAAA,WAAAc,QAAAI,EAAAiB,aAGA3C,EAAA4C,SAAAlB,EAAAmB,QAAAC,OAAA,CAAA,CACAC,IAAA,iBACAtB,QAAAC,EAAAiB,cACArC,MAAA0C,IACAzD,IAAA4B,OACAZ,QAAAC,IAAA,sBAAAc,KAAA0B,GAEArC,QAAAS,IAAA4B,EAAA3B,QAAA4B,GAAA,KAAAA,EAAAC,SAAA1B,KAAAyB,IACA1D,IAAA4B,OAAAZ,QAAAC,IAAA,WAAAyC,GACAjD,EAAAS,IAAAwC,EAAAE,IAAA7C,MAAAmC,IACAlD,IAAA4B,QACAZ,QAAAC,IAAA,eAAAiC,GACAlC,QAAAC,IAAA,kBAAAkB,EAAAmB,QAAAO,MAAAC,GAAAA,EAAAN,KAAAN,EAAAM,QAEA/C,EAAAsD,IAAA,IACAb,KACAf,EAAAmB,QAAAO,MAAAC,GAAAA,EAAAN,KAAAN,EAAAM,MACAtB,QAAAC,EAAAiB,sBAIAJ,OAAAD,IACA/B,QAAAgD,MAAA,qBAAAjC,KAAAgB,EAAA,IAhCA/C,IAAA4B,OACAZ,QAAAC,IAAA,wBAAAc,KAAAI,EAgCA,QAGA,IAEA,KCzHA,WACA,MAAA8B,EAAAR,GAAAA,EAAAS,KAAAjC,KAAAkC,GAAAA,EAAAjB,MACAkB,EAAAA,GAAAF,IACA,GAAAE,EAAA,CACA,MAAAC,EAAA,CAAAF,EAAAG,KACA,GAAAA,EAAAC,SAAA,CACA,MAAAC,EAAAL,EAAAG,EAAAG,KAAAC,QACAC,EAAAL,EAAAM,MAEA,OAAAN,EAAAC,UACA,IAAA,QACA,OAAAC,GAAAG,EACA,IAAA,YACA,OAAAH,GAAAG,EACA,IAAA,KACA,OAAAA,EAAAE,SAAAL,GACA,IAAA,SACA,OAAAG,EAAAE,SAAAL,GACA,IAAA,OACA,OAAAA,EAAAG,EACA,IAAA,gBACA,OAAAH,GAAAG,EACA,IAAA,UACA,OAAAH,EAAAG,EACA,IAAA,mBACA,OAAAH,GAAAG,EACA,IAAA,UACA,OAAAA,EAAA,IAAAH,GAAAG,EAAA,GACA,IAAA,cACA,QAAAA,EAAA,IAAAH,GAAAG,EAAA,IACA,IAAA,cACA,OAAAG,OAAAN,GAAAO,WAAAD,OAAAH,IACA,IAAA,kBACA,OAAAG,OAAAN,GAAAO,WAAAD,OAAAH,IACA,IAAA,WACA,OAAAG,OAAAN,GAAAK,SAAAC,OAAAH,IACA,IAAA,eACA,OAAAG,OAAAN,GAAAK,SAAAC,OAAAH,IACA,IAAA,YACA,OAAAG,OAAAN,GAAAQ,SAAAF,OAAAH,IACA,IAAA,gBACA,OAAAG,OAAAN,GAAAQ,SAAAF,OAAAH,IACA,IAAA,WACA,OAAA,MAAAH,GAAA,IAAAA,EACA,IAAA,eACA,OAAA,MAAAA,GAAA,IAAAA,EACA,IAAA,UACA,OAAA,MAAAA,EACA,IAAA,cACA,OAAA,MAAAA,EAEA,CAEA,GAAAF,EAAAW,WAAAX,EAAAY,MAAAvD,OAAA,CACA,IAAA,IAAAwD,KAAAb,EAAAY,MAAA,CACA,MAAAE,EAAAf,EAAAF,EAAAgB,GACA,IAAAC,GAAA,OAAAd,EAAAW,UAAA,OAAA,EACA,GAAAG,GAAA,MAAAd,EAAAW,UAAA,OAAA,CACA,CAEA,MAAA,MAAAX,EAAAW,SACA,CAEA,OAAA,CAAA,EAGA,OAAAf,EAAApC,QAAAqC,GAAAE,EAAAF,EAAAC,IACA,CAEA,OAAAF,CAAA,EAEAmB,EAAAA,GAAAnB,GACAA,EAAAoB,MAAA,CAAAd,EAAAG,KACA,IAAA,IAAAY,KAAAF,EAAA,CACA,GAAAb,EAAAe,EAAAb,SAAAC,EAAAY,EAAAb,QAAA,SACA,IAAAc,EAAAD,EAAAE,WAAA,QAAAF,EAAAE,UAAAC,cACA,OAAAlB,EAAAe,EAAAb,QAAAC,EAAAY,EAAAb,QACAc,EAAA,GAAA,EAEAA,GAAA,EAAA,CAEA,CAEA,OAAA,CAAA,IAGAG,EAAAA,GAAAzB,IAEA0B,MAAAC,QAAAF,IACA,GAAAA,EAAAhE,QAAA,KAAAgE,EAAA,GAAAjB,OAkBAR,EAhBAA,EAAAjC,KAAAiB,IACA,MAAAiB,EAAA,CAAA,EAEA,IAAA,IAAAO,KAAAiB,EACA,KAAAjB,EAAAA,OACAjD,OAAAqE,OAAA3B,EAAAjB,GAEAiB,EAAAO,EAAAqB,OAAArB,EAAAA,QAAAA,GACAxB,EAAAwB,EAAAA,QAAAA,GAIA,OAAAP,CAAA,IAMA6B,EAAAA,GAAA9B,GAAA8B,EAAA,IAAA,IAAAC,IAAA/B,IAAAA,EACAgC,EAAA,CAAAC,EAAAC,EAAAC,IAAAnC,IACA,MAAAoC,EAAApC,EAAAvC,OAKA,OAJAwE,EAAAI,OAAAJ,GAAA,GACAC,EAAAG,OAAAH,GAAA,GACAlC,EAAAA,EAAAsC,MAAAL,EAAAC,EAAAD,EAAAC,OAAAK,GAEAJ,EACA,CACAF,SACAC,QACAE,QACAI,KAAA,CACAP,OAAA,CACAQ,MAAA,EACAC,KAAAT,EAAAC,EAAA,EAAAD,EAAAC,EAAA,EACAS,KAAAV,EAAAC,EAAAE,EAAAH,EAAAC,EAAAD,EACAW,MAAAC,KAAAC,KAAAV,EAAAF,GAAA,GAAAA,GAEAa,QAAAF,KAAAG,MAAAf,EAAAC,GAAA,EACAE,MAAAS,KAAAC,KAAAV,EAAAF,IAEA3B,KAAAP,GAIAA,CAAA,EAGAlE,IAAAmH,QAAA,CACA,iBAAA7G,GACA,MAAA8G,EAAA7G,KAAA8G,MAAA/G,GACAG,EAAAT,IAAAE,QAAAgB,IAAAkG,EAAAE,YACAC,EAAAH,EAAAG,IACAC,EAAAD,EAAAC,MAAAnH,MAAAkH,EAAAC,MAEA,OAAA/G,EACAgH,QAAA,CACAC,SAAAF,EAAA,IACAG,OAAAH,EAAA,KACAI,cAAA,IAEA7G,KAAAkD,GACAlD,KAAAqD,EAAAmD,EAAAnD,SACArD,KAAAsE,EAAAkC,EAAAlC,SACAtE,KAAA4E,EAAA4B,EAAA5B,UACA5E,KAAAiF,EAAAuB,EAAAvB,WACAjF,KAAAmF,EAAAqB,EAAApB,OAAAoB,EAAAnB,OAAA,GACA,EAEA,iBAAA,SAAA9F,GACA,MAAA8G,EAAA7G,KAAA8G,MAAA/G,GACAG,EAAAT,IAAAE,QAAAgB,IAAAkG,EAAAE,YACAC,EAAAH,EAAAG,IACAC,EAAAD,EAAAC,MAAAnH,MAAAkH,EAAAC,MAEA,OAAA/G,EACAgH,QAAA,CACAC,SAAAF,EAAA,IACAG,OAAAH,EAAA,KACAI,cAAA,IAEA7G,KAAAkD,GACAlD,KAAAqD,EAAAmD,EAAAnD,SACArD,KAAAsE,EAAAkC,EAAAlC,SACAtE,KAAA4E,EAAA4B,EAAA5B,UACA5E,KAAAiF,EAAAuB,EAAAvB,WACAjF,MAAAmD,GAAAA,EAAA,IACA,EAEA,gBAAA,SAAA5D,GACA,MAAA8G,EAAA7G,KAAA8G,MAAA/G,GACAG,EAAAT,IAAAE,QAAAgB,IAAAkG,EAAAE,YACAC,EAAAH,EAAAG,IACAC,EAAAD,EAAAC,MAAAnH,MAAAkH,EAAAC,MAEA,OAAA/G,EACAgH,QAAA,CACAC,SAAAF,EAAA,IACAG,OAAAH,EAAA,KACAI,cAAA,IAEA7G,KAAAkD,GACAlD,KAAAqD,EAAAmD,EAAAnD,SACArD,KAAAsE,EAAAkC,EAAAlC,SACAtE,KAAA4E,EAAA4B,EAAA5B,UACA5E,KAAAiF,EAAAuB,EAAAvB,WACAjF,KAAAmF,EAAAqB,EAAApB,OAAAoB,EAAAnB,OAAA,GACA,EAEA,iBAAA,SAAA9F,GACA,MAAA8G,EAAA7G,KAAA8G,MAAA/G,GACAG,EAAAT,IAAAE,QAAAgB,IAAAkG,EAAAE,YACAC,EAAAH,EAAAG,IACArE,EAAA,CAAA,EAEA,IAAA,IAAA0B,KAAA2C,EAAAM,OACA3E,EAAA0B,EAAAF,QAAAE,EAAAA,MAKA,OAFA1B,EAAAM,IAAA+D,EAAAC,MAAA,IAAAM,KAAAC,MAEAtH,EACAsD,IAAAb,GACAnC,MAAA0C,IAAA,CACAuE,SAAAvE,EAAAwE,GAAA,EAAA,EACAC,SAAAzE,EAAAG,MAEA,EAEA,iBAAA,SAAAtD,GACA,MAAA8G,EAAA7G,KAAA8G,MAAA/G,GACAG,EAAAT,IAAAE,QAAAgB,IAAAkG,EAAAE,YACAC,EAAAH,EAAAG,IAEA,OAAA9G,EACAgH,QAAA,CACAC,SAAAH,EAAAC,MAAA,IACAG,OAAAJ,EAAAC,MAAA,KACAI,cAAA,IAEA7G,KAAAkD,GACAlD,KAAAqD,EAAAmD,EAAAnD,SACArD,MAAAoH,GACA1H,EAAA4C,SACA8E,EAAAlG,KAAAiB,IACA,IAAA,IAAA0B,KAAA2C,EAAAM,OACA3E,EAAA0B,EAAAF,QAAAE,EAAAA,MAGA,OAAA1B,CAAA,OAIAnC,MAAAqH,IAAA,CACAJ,SAAAI,EAAAtG,QAAA2B,GAAAA,EAAAwE,KAAAtG,UAEA,EAEA,iBAAA,SAAArB,GACA,MAAA8G,EAAA7G,KAAA8G,MAAA/G,GACAG,EAAAT,IAAAE,QAAAgB,IAAAkG,EAAAE,YACAC,EAAAH,EAAAG,IAEA,OAAA9G,EACAgH,QAAA,CACAC,SAAAH,EAAAC,MAAA,IACAG,OAAAJ,EAAAC,MAAA,KACAI,cAAA,IAEA7G,KAAAkD,GACAlD,KAAAqD,EAAAmD,EAAAnD,SACArD,MAAAoH,GACA1H,EAAA4C,SACA8E,EAAAlG,KAAAiB,IACA,CAAAmF,UAAA,EAAA7E,IAAAN,EAAAM,IAAA8E,KAAApF,EAAAoF,YAIAvH,MAAAqH,IAAA,CACAJ,SAAAI,EAAAtG,QAAA2B,GAAAA,EAAAwE,KAAAtG,UAEA,EAEA,cAAA,SAAArB,GACA,MAAAgH,WAAAA,EAAAiB,MAAAA,EAAAC,YAAAA,GAAAjI,KAAA8G,MAAA/G,GAGA,OAFAN,IAAAE,QAAAgB,IAAAoG,GAEApG,IAAAqH,EAAA,CAAAC,eACA,EAEA,wBAAA,SAAAlI,GACA,MAAAgH,WAAAA,EAAAiB,MAAAA,EAAAlI,KAAAA,GAAAE,KAAA8G,MAAA/G,GAGA,OAFAN,IAAAE,QAAAgB,IAAAoG,GAEAmB,cAAAF,EAAAlI,GAAAU,MAAA2H,GACA1I,IAAA2I,UAAAC,cAAAF,IAEA,EAEA,wBAAA,SAAApI,GACA,MAAAgH,WAAAA,EAAAiB,MAAAA,EAAAlI,KAAAA,EAAAwI,QAAAA,GAAAtI,KAAA8G,MAAA/G,IACAmE,KAAAA,EAAAzC,KAAAA,GAAAhC,IAAA2I,UAAAG,aAAAD,GACApI,EAAAT,IAAAE,QAAAgB,IAAAoG,GACApE,EAAAzC,EAAAS,IAAAqH,GAEA,OAAA9H,EAAAsI,cAAA7F,EAAAM,IAAAnD,EAAA6C,EAAAoF,KAAA7D,EAAAzC,EACA,EAEA,2BAAA,SAAA1B,GACA,MAAAgH,WAAAA,EAAAiB,MAAAA,EAAAlI,KAAAA,GAAAE,KAAA8G,MAAA/G,GACAG,EAAAT,IAAAE,QAAAgB,IAAAoG,GACApE,EAAAzC,EAAAS,IAAAqH,GAEA,OAAA9H,EAAAuI,iBAAA9F,EAAAM,IAAAnD,EAAA6C,EAAAoF,KACA,GAGA,CAnTA,GCAAtI,IAAAiJ,UAAA,UAAA,CAEAC,WAAA,CACAzI,GAAA,CACAuB,KAAA8C,OACAqE,QAAA,OAIAC,QAAA,CACAC,cAAAjH,GACA,OAAA7B,KAAA+I,IAAAjH,UAAAC,KAAAtC,IAAAE,QAAAgB,IAAAkB,GACA,EAEAmH,YAAAnH,GACA,OAAA7B,KAAA+I,IAAAjH,UAAAmH,GAAAxJ,IAAAE,QAAAgB,IAAAkB,GACA,GAGAqH,OAAA,CACA9G,OAAA+G,MACA1F,MAAA0F,MACAnH,KAAAmH,OAGAC,OACApI,SAAAC,iBAAA,gBAAAoI,IACAA,EAAA9G,OAAAf,WAAAxB,KAAAsJ,MAAApJ,IACAF,KAAAqC,cAAA,OAAA,KAAAgH,EAAA9G,OAAAH,OACA,IAGApB,SAAAC,iBAAA,iBAAAoI,IACAA,EAAA9G,OAAAf,WAAAxB,KAAAsJ,MAAApJ,IACAF,KAAAqC,cAAA,QAAA,KAAAgH,EAAA9G,OAAAH,OACA,IAGApC,KAAAuJ,eACA,EAEAC,cAAAC,GACAA,EAAAxJ,IAAA,OACAD,KAAAuJ,eAEA,EAEAG,UACA1J,KAAA2J,WACA3J,KAAA2J,SAAAC,SACA5J,KAAA2J,SAAA,KAEA,EAEAJ,gBACAvJ,KAAA2J,UAAA3J,KAAA2J,SAAAC,SAEA5J,KAAAsJ,MAAApJ,KACAF,KAAA+I,IAAAtJ,IAAAE,QAAAgB,IAAAX,KAAAsJ,MAAApJ,IACAF,KAAA2J,SAAA3J,KAAA+I,IAAAc,QAAA,CACA5H,MAAA,EACAoF,cAAA,EACAyC,MAAA,QACA3H,GAAA,UAAAC,IACA3C,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,sBAAAsC,GACApC,KAAAqC,cAAA,SAAA,KAAAD,EAAA,IACAD,GAAA,SAAAK,IACA/C,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,qBAAA0C,GACAxC,KAAAqC,cAAA,QAAA,KAAAG,EAAA,IAGA,ICvEA/C,IAAAiJ,UAAA,eAAA,CAEAqB,YAAA,CACA7F,KAAA,GACAiC,KAAA,EACA6D,MAAA,EACAC,MAAA,EACAlF,KAAA,CAAA5C,GAAA,GAAA+H,IAAA,OACAjK,IAAA,CAAAmG,OAAA,EAAAC,MAAA,EAAAC,MAAA,EAAAC,MAAA,IAGAoC,WAAA,CACAzI,GAAA,CACAuB,KAAA8C,OACAqE,QAAA,IAGAuB,WAAA,CACA1I,KAAA8C,OACAqE,QAAA,IAGArH,OAAA,CACAE,KAAA8C,OACAqE,QAAA,IAGAzC,KAAA,CACA1E,KAAAuE,OACA4C,QAAA,GAGAwB,SAAA,CACA3I,KAAAuE,OACA4C,QAAA,GAGAyB,OAAA,CACA5I,KAAA8C,OACAqE,QAAA,IAGA0B,QAAA,CACA7I,KAAA8C,OACAqE,QAAA,MACA2B,KAAA,CAAA,MAAA,UAIA1B,QAAA,CACA2B,OAAArE,GACAnG,KAAAyK,aAAAtE,EACA,EAEAC,QACApG,KAAAyK,YAAA,EACA,EAEApE,OACArG,KAAAyK,YAAAzK,KAAAkE,KAAAiC,KAAA,EACA,EAEAG,OACAtG,KAAAyK,YAAAzK,KAAAkE,KAAAiC,KAAA,EACA,EAEAI,OACAvG,KAAAyK,YAAAzK,KAAAkE,KAAA8F,MACA,EAEAjF,KAAA2F,EAAAR,GACAlK,KAAAsJ,MAAAe,OAAAK,EACA1K,KAAAsJ,MAAAgB,QAAAJ,GAAA,QAAAA,EAAA/E,cAAA,OAAA,KACA,GAGA+D,OAAA,CACA9G,OAAA+G,MACAwB,QAAAxB,MACA1F,MAAA0F,OAGAC,OACApJ,KAAA4K,MAAA,GACA5K,KAAA6K,OAAA,GACA7K,KAAAuJ,gBAEAvJ,KAAAsJ,MAAA/H,QACAvB,KAAA8K,eAEA,EAEAtB,cAAAC,GACAA,EAAAxJ,IAAA,MACAD,KAAAuJ,gBACAE,EAAAxJ,IAAA,cACAD,KAAA+K,cACAtB,EAAAxJ,IAAA,UACAD,KAAA8K,gBACArB,EAAAxJ,IAAA,WAAAwJ,EAAAxJ,IAAA,WACAD,KAAAgL,eACAvB,EAAAxJ,IAAA,SAAAwJ,EAAAxJ,IAAA,cACAD,KAAAyK,YAAAzK,KAAAsJ,MAAAnD,KAEA,EAEAuD,UACA1J,KAAA2J,WACA3J,KAAA2J,SAAAC,SACA5J,KAAA2J,SAAA,MAGA3J,KAAAiL,gBACAjL,KAAAiL,gBACAjL,KAAAiL,cAAA,KAEA,EAEA1B,gBACAvJ,KAAA+I,IAAA,KAEA/I,KAAA2J,UACA3J,KAAA2J,SAAAC,SAGA5J,KAAAsJ,MAAApJ,KACAF,KAAA+I,IAAAtJ,IAAAE,QAAAgB,IAAAX,KAAAsJ,MAAApJ,IAEAF,KAAA2J,SAAA3J,KAAA+I,IAAAc,QAAA,CACA5H,MAAA,EACAoF,cAAA,EACAyC,MAAA,MACAvI,OAAAoB,GAAAA,EAAAM,IAAAuB,WAAAxE,KAAAsJ,MAAAa,WAAA,OACAhI,GAAA,UAAAC,IACA3C,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,sBAAAsC,GACApC,KAAA+K,cACA/K,KAAAqC,cAAA,SAAA,KAAAD,EAAA,IACAD,GAAA,SAAAK,IACA/C,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,qBAAA0C,GACAxC,KAAAqC,cAAA,QAAA,KAAAG,EAAA,IAGAxC,KAAAsJ,MAAAnD,KAAA,GACAnG,KAAAM,IAAA,OAAAN,KAAAsJ,MAAAnD,MAGAnG,KAAA+K,cAEA,EAEAA,cACA,IAAA/K,KAAA+I,IAAA,OAEA,MAAAoB,WAAAA,GAAAnK,KAAAsJ,MAEAa,EACAnK,KAAA+I,IAAA7B,QAAA,CACAC,SAAAgD,EAAA,IACA/C,OAAA+C,EAAA,KACA9C,cAAA,IACA7G,MAAA0C,GAAAA,EAAAS,KAAAjC,KAAAkC,GAAAA,EAAAjB,QAAAnC,MAAAoH,IACAnI,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,oBAAA8H,GACA5H,KAAA4K,MAAAhD,EACA5H,KAAAgL,cACAvL,IAAAyL,UAAA,IAAAlL,KAAAqC,cAAA,YAAA,IACAI,OAAAD,IACA/C,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,mBAAA0C,GACAxC,KAAAqC,cAAA,QAAA,KAAAG,EAAA,KAGAxC,KAAA4K,MAAA,GACA5K,KAAAgL,cACAvL,IAAAyL,UAAA,IAAAlL,KAAAqC,cAAA,aAEA,EAEAyI,gBACA9K,KAAAiL,gBACAjL,KAAAiL,gBACAjL,KAAAiL,cAAA,MAGAjL,KAAAsJ,MAAA/H,SACAvB,KAAAiL,cAAAxL,IAAA0L,QAAA,KACA1L,IAAAqH,MAAA9G,KAAAsJ,MAAA/H,OAAAvB,MACAA,KAAAgL,aAAA,IAGA,EAEAA,cACAhL,KAAA6K,OAAA7K,KAAA4K,MAEA5K,KAAAsJ,MAAA/H,SACAvB,KAAA6K,OAAA7K,KAAA4K,MAAArJ,QAAAoB,GACAlD,IAAAqH,MAAA9G,KAAAsJ,MAAA/H,OAAA9B,IAAA2L,UAAAzI,EAAA3C,UAIA,IAAAqK,OAAAA,EAAAC,QAAAA,EAAAF,SAAAA,GAAApK,KAAAsJ,MACAW,EAAAjK,KAAA6K,OAAAzJ,OACA4I,EAAAI,EAAA5D,KAAA6E,IAAA,EAAA7E,KAAAC,KAAAwD,EAAAG,IAAA,EAEA,GAAAC,EAAA,CACA,MAAAiB,EAAA,SAAAhB,EAEAtK,KAAA6K,OAAA9F,MAAA,CAAAd,EAAAG,IACAkH,EACArH,EAAAoG,GAAAjG,EAAAiG,IAAA,EAAApG,EAAAoG,GAAAjG,EAAAiG,GAAA,EAAA,EAEApG,EAAAoG,GAAAjG,EAAAiG,IAAA,EAAApG,EAAAoG,GAAAjG,EAAAiG,GAAA,EAAA,GAGA,CAEArK,KAAAM,IAAA,CACA0J,QAAAC,UAGAjK,KAAAyK,YAAAzK,KAAAkE,KAAAiC,MAAAnG,KAAAsJ,MAAAnD,KACA,EAEAsE,YAAAtE,GACA,MAAAoF,EAAAvL,KAAAsJ,MAAAc,SACAJ,EAAAhK,KAAAkE,KAAA8F,MAIApE,IAFAO,EAAAA,EAAA,EAAA,EAAAA,EAAA6D,EAAAA,EAAA7D,GAEA,GAAAoF,EAEAvL,KAAAM,IAAA,CACA6F,KAAAA,EACAjC,KAAAqH,EAAAvL,KAAA6K,OAAA5E,MAAAL,EAAAA,EAAA2F,GAAAvL,KAAA6K,OACA5K,IAAA,CACAmG,MAAAD,EAAA,EACAE,KAAAF,EAAA,EACAG,KAAAH,EAAA6D,EACAzD,KAAAJ,EAAA6D,IAGA,IChPAvK,IAAAiJ,UAAA,iBAAA,CAEAqB,YAAA,CACA7F,KAAA,CAAA,EACAsH,OAAA,GAGA7C,WAAA,CACAzI,GAAA,CACAuB,KAAA8C,OACAqE,QAAA,MAGA6C,MAAA,CACAhK,KAAA8C,OACAqE,QAAA,MAGAX,YAAA,CACAxG,KAAAiK,QACA9C,SAAA,GAGA+C,WAAA,CACAlK,KAAAiK,QACA9C,SAAA,IAIAC,QAAA,CACA2B,OAAAiB,GACAzL,KAAAsJ,MAAAmC,MAAAA,CACA,EAEAG,UACA5L,KAAA6L,QAAA7L,KAAAsJ,MAAAmC,MACA,GAGAvC,OAAA,CACA9G,OAAA+G,MACA1F,MAAA0F,OAGAC,OACApJ,KAAAsJ,MAAApJ,IACAF,KAAAuJ,eAEA,EAEAC,cAAAC,GACAA,EAAAxJ,IAAA,MACAD,KAAAuJ,gBAEAvJ,KAAA6L,SAEA,EAEAnC,UACA1J,KAAA8L,gBACA,EAEAvC,gBACAvJ,KAAA8L,iBAEA9L,KAAAsJ,MAAApJ,IAKAF,KAAA+I,IAAAtJ,IAAAE,QAAAgB,IAAAX,KAAAsJ,MAAApJ,IAEAF,KAAAsJ,MAAAmC,OACAzL,KAAA6L,WAPA7L,KAAA+I,IAAA,IASA,EAEA8C,UACA7L,KAAA8L,iBAEA9L,KAAA+I,MAEA/I,KAAAsJ,MAAAmC,OACAzL,KAAA+I,IAAApI,IAAAX,KAAAsJ,MAAAmC,MAAA,CAAAxD,YAAAjI,KAAAsJ,MAAArB,cAAAzH,MAAAmC,IACA3C,KAAAM,IAAA,CACA4D,KAAAvB,EACA6I,OAAA,GACA,IAGAxL,KAAA2J,SAAA3J,KAAA+I,IAAAc,QAAA,CACA5H,MAAA,EACAoF,cAAA,EACAY,YAAAjI,KAAAsJ,MAAArB,YACA6B,MAAA,MACAiC,QAAA,CAAA/L,KAAAsJ,MAAAmC,SACAtJ,GAAA,UAAAC,IACA3C,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,sBAAAsC,GACApC,KAAAsJ,MAAAqC,WACA3L,KAAAM,IAAA,CACA4D,KAAA9B,EAAAO,IACA6I,OAAA,IAGAxL,KAAAM,IAAA,SAAA,GAEAN,KAAAqC,cAAA,SAAA,KAAAD,EAAA,IACAD,GAAA,SAAAK,IACA/C,IAAA4B,OAAAZ,QAAAY,MAAA,GAAArB,KAAAF,qBAAA0C,GACAxC,KAAAM,IAAA,CACA4D,KAAA,CAAA,EACAsH,OAAA,IAEAxL,KAAAqC,cAAA,QAAA,KAAAG,EAAA,KAGAxC,KAAAM,IAAA,CACA4D,KAAA,CAAA,EACAsH,OAAA,IAGA,EAEAM,iBACA9L,KAAA2J,WACAlK,IAAA4B,OACAZ,QAAAC,IAAA,iBAAAV,KAAA2J,UAGA3J,KAAA2J,SAAAC,SACA5J,KAAA2J,SAAA,KAEA","file":"dmxPouchDB.js","sourcesContent":["dmx.databases = dmx.databases || {};\r\n\r\ndmx.pouchdb = {\r\n  \r\n  databases: new Map(),\r\n\r\n  setup (name, options = {}) {\r\n    if (!this.databases.has(name)) {\r\n      const db = new PouchDB(name, {\r\n        ...options,\r\n        adapter: 'indexeddb',\r\n      });\r\n      db.setMaxListeners(0);\r\n      this.databases.set(name, db);\r\n      db.info().then((info) => {\r\n        console.log(`PouchDB: ${name}`, info);\r\n      });\r\n      return db;\r\n    }\r\n\r\n    return this.databases.get(name);\r\n  },\r\n\r\n  get (name) {\r\n    return this.setup(name);\r\n  },\r\n\r\n};\r\n\r\ndmx.Startup(new Promise((resolve, reject) => {\r\n  // wait for DomContentLoaded, will trigger after all scripts are loaded (including defered scripts)\r\n  document.addEventListener('DOMContentLoaded', resolve);\r\n}).then(() => {\r\n  if (dmx.databases && Object.keys(dmx.databases).length) {\r\n    if (dmx.debug) {\r\n      console.log('dmx.databases:', dmx.databases);\r\n    }\r\n\r\n    return Promise.all(Object.keys(dmx.databases).filter(database => {\r\n      return dmx.databases[database].type === 'pouchdb';\r\n    }).map(database => {\r\n      const { version, upgrade, remote, options } = dmx.databases[database];\r\n      const db = dmx.pouchdb.setup(database, { options });\r\n\r\n      if (remote) {\r\n        if (dmx.debug) {\r\n          console.log(`${database} replicate from ${remote}`);\r\n        }\r\n\r\n        return db.replicate.from(remote).then(() => {\r\n          if (dmx.debug) {\r\n            console.log(`${database} replication done, init sync`);\r\n          }\r\n\r\n          db.sync(remote, {\r\n            live: true,\r\n            retry: true,\r\n          }).on('change', (change) => {\r\n            document.dispatchEvent(new CustomEvent('pouchdb:sync', { detail: {database, change }}));\r\n            if (dmx.debug) {\r\n              console.log(`${database} sync change`, change);\r\n            }\r\n          }).on('error', (err) => {\r\n            document.dispatchEvent(new CustomEvent('pouchdb:error', { detail: {database, err }}));\r\n            if (dmx.debug) {\r\n              console.log(`${database} sync error`, err);\r\n            }\r\n          });\r\n        }).catch((err) => {\r\n          console.warn(`Replication error for ${database}:`, err);\r\n        });\r\n      } else {\r\n        if (dmx.debug) {\r\n          console.log(`upgrade ${database} to version ${version}`);\r\n        }\r\n\r\n        return db.get('_local/version').then(doc => doc.version).catch(err => 0).then(dbVersion => {\r\n          if (dmx.debug) {\r\n            console.log(`${database} current version ${dbVersion}`);\r\n          }\r\n\r\n          return Promise.all(upgrade.map(upgrade => {\r\n            if (dbVersion >= upgrade.toVersion) {\r\n              if (dmx.debug) {\r\n                console.log(`Skipping upgrade for ${database}:`, upgrade);\r\n              }\r\n              return;\r\n            }\r\n\r\n            if (dmx.debug) {\r\n              console.log(`Upgrade ${database} to ${upgrade.toVersion}`);\r\n            }\r\n\r\n            return db.bulkDocs(upgrade.updates.concat([{\r\n              _id: '_local/version',\r\n              version: upgrade.toVersion,\r\n            }])).then(result => {\r\n              if (dmx.debug) {\r\n                console.log(`Upgrade result for ${database}:`, result);\r\n              }\r\n              return Promise.all(result.filter(res => res.status == 409).map(res => {\r\n                if (dmx.debug) console.log('Conflict', res);\r\n                return db.get(res.id).then(doc => {\r\n                  if (dmx.debug) {\r\n                    console.log('Conflict doc', doc);\r\n                    console.log('Conflict update', upgrade.updates.find(update => update._id == doc._id));\r\n                  }\r\n                  return db.put({\r\n                    ...doc,\r\n                    ...upgrade.updates.find(update => update._id == doc._id),\r\n                    version: upgrade.toVersion,\r\n                  });\r\n                });\r\n              }));\r\n            }).catch(err => {\r\n              console.error(`Upgrade error for ${database}:`, err);\r\n            });\r\n          }));\r\n        });\r\n      }\r\n    }));\r\n  }\r\n}));","(function () {\r\n  const normalize = (result) => result.rows.map((row) => row.doc);\r\n  const wheres = (wheres) => (rows) => {\r\n    if (wheres) {\r\n      const validate = (row, rule) => {\r\n        if (rule.operator) {\r\n          const a = row[rule.data.column];\r\n          const b = rule.value;\r\n\r\n          switch (rule.operator) {\r\n            case \"equal\":\r\n              return a == b;\r\n            case \"not_equal\":\r\n              return a != b;\r\n            case \"in\":\r\n              return b.includes(a);\r\n            case \"not_in\":\r\n              return !b.includes(a);\r\n            case \"less\":\r\n              return a < b;\r\n            case \"less_or_equal\":\r\n              return a <= b;\r\n            case \"greater\":\r\n              return a > b;\r\n            case \"greater_or_equal\":\r\n              return a >= b;\r\n            case \"between\":\r\n              return b[0] <= a <= b[1];\r\n            case \"not_between\":\r\n              return !(b[0] <= a <= b[1]);\r\n            case \"begins_with\":\r\n              return String(a).startsWith(String(b));\r\n            case \"not_begins_with\":\r\n              return !String(a).startsWith(String(b));\r\n            case \"contains\":\r\n              return String(a).includes(String(b));\r\n            case \"not_contains\":\r\n              return !String(a).includes(String(b));\r\n            case \"ends_with\":\r\n              return String(a).endsWith(String(b));\r\n            case \"not_ends_with\":\r\n              return !String(a).endsWith(String(b));\r\n            case \"is_empty\":\r\n              return a == null || a == \"\";\r\n            case \"is_not_empty\":\r\n              return a != null && a != \"\";\r\n            case \"is_null\":\r\n              return a == null;\r\n            case \"is_not_null\":\r\n              return a != null;\r\n          }\r\n        }\r\n\r\n        if (rule.condition && rule.rules.length) {\r\n          for (let _rule of rule.rules) {\r\n            const valid = validate(row, _rule);\r\n            if (!valid && rule.condition == \"AND\") return false;\r\n            if (valid && rule.condition == \"OR\") return true;\r\n          }\r\n\r\n          return rule.condition == \"OR\" ? false : true;\r\n        }\r\n\r\n        return true;\r\n      };\r\n\r\n      return rows.filter((row) => validate(row, wheres));\r\n    }\r\n\r\n    return rows;\r\n  };\r\n  const orders = (orders) => (rows) => {\r\n    return rows.sort((a, b) => {\r\n      for (let order of orders) {\r\n        if (a[order.column] == b[order.column]) continue;\r\n        let desc = order.direction && order.direction.toLowerCase() == \"desc\";\r\n        if (a[order.column] < b[order.column]) {\r\n          return desc ? 1 : -1;\r\n        } else {\r\n          return desc ? -1 : 1;\r\n        }\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  };\r\n  const columns = (columns) => (rows) => {\r\n    if (\r\n      Array.isArray(columns) &&\r\n      !(columns.length == 1 && columns[0].column == \"*\")\r\n    ) {\r\n      return rows.map((doc) => {\r\n        const row = {};\r\n\r\n        for (let column of columns) {\r\n          if (column.column == \"*\") {\r\n            Object.assign(row, doc);\r\n          } else {\r\n            row[column.alias || column.column || column] =\r\n              doc[column.column || column];\r\n          }\r\n        }\r\n\r\n        return row;\r\n      });\r\n    }\r\n\r\n    return rows;\r\n  };\r\n  const distinct = (distinct) => (rows) => distinct ? [...new Set(rows)] : rows;\r\n  const paged = (offset, limit, includePageInfo) => (rows) => {\r\n    const total = rows.length;\r\n    offset = Number(offset || 0);\r\n    limit = Number(limit || 0);\r\n    rows = rows.slice(offset, limit ? offset + limit : undefined);\r\n\r\n    if (includePageInfo) {\r\n      return {\r\n        offset,\r\n        limit,\r\n        total,\r\n        page: {\r\n          offset: {\r\n            first: 0,\r\n            prev: offset - limit > 0 ? offset - limit : 0,\r\n            next: offset + limit < total ? offset + limit : offset,\r\n            last: (Math.ceil(total / limit) - 1) * limit,\r\n          },\r\n          current: Math.floor(offset / limit) + 1,\r\n          total: Math.ceil(total / limit),\r\n        },\r\n        data: rows,\r\n      };\r\n    }\r\n\r\n    return rows;\r\n  };\r\n\r\n  dmx.Actions({\r\n    \"pouchdb.select\" (options) {\r\n      const parsed = this.parse(options);\r\n      const db = dmx.pouchdb.get(parsed.connection);\r\n      const sql = parsed.sql;\r\n      const table = sql.table.name || sql.table;\r\n\r\n      return db\r\n        .allDocs({\r\n          startkey: table + \"/\",\r\n          endkey: table + \"/\\uffff\",\r\n          include_docs: true,\r\n        })\r\n        .then(normalize)\r\n        .then(wheres(sql.wheres))\r\n        .then(orders(sql.orders))\r\n        .then(columns(sql.columns))\r\n        .then(distinct(sql.distinct))\r\n        .then(paged(sql.offset, sql.limit, false));\r\n    },\r\n\r\n    \"pouchdb.single\": function (options) {\r\n      const parsed = this.parse(options);\r\n      const db = dmx.pouchdb.get(parsed.connection);\r\n      const sql = parsed.sql;\r\n      const table = sql.table.name || sql.table;\r\n\r\n      return db\r\n        .allDocs({\r\n          startkey: table + \"/\",\r\n          endkey: table + \"/\\uffff\",\r\n          include_docs: true,\r\n        })\r\n        .then(normalize)\r\n        .then(wheres(sql.wheres))\r\n        .then(orders(sql.orders))\r\n        .then(columns(sql.columns))\r\n        .then(distinct(sql.distinct))\r\n        .then((rows) => rows[0]);\r\n    },\r\n\r\n    \"pouchdb.paged\": function (options) {\r\n      const parsed = this.parse(options);\r\n      const db = dmx.pouchdb.get(parsed.connection);\r\n      const sql = parsed.sql;\r\n      const table = sql.table.name || sql.table;\r\n\r\n      return db\r\n        .allDocs({\r\n          startkey: table + \"/\",\r\n          endkey: table + \"/\\uffff\",\r\n          include_docs: true,\r\n        })\r\n        .then(normalize)\r\n        .then(wheres(sql.wheres))\r\n        .then(orders(sql.orders))\r\n        .then(columns(sql.columns))\r\n        .then(distinct(sql.distinct))\r\n        .then(paged(sql.offset, sql.limit, true));\r\n    },\r\n\r\n    \"pouchdb.insert\": function (options) {\r\n      const parsed = this.parse(options);\r\n      const db = dmx.pouchdb.get(parsed.connection);\r\n      const sql = parsed.sql;\r\n      const doc = {};\r\n\r\n      for (let value of sql.values) {\r\n        doc[value.column] = value.value;\r\n      }\r\n\r\n      doc._id = sql.table + \"/\" + Date.now();\r\n\r\n      return db\r\n        .put(doc)\r\n        .then((result) => ({\r\n          affected: result.ok ? 1 : 0,\r\n          identity: result.id,\r\n        }));\r\n    },\r\n\r\n    \"pouchdb.update\": function (options) {\r\n      const parsed = this.parse(options);\r\n      const db = dmx.pouchdb.get(parsed.connection);\r\n      const sql = parsed.sql;\r\n\r\n      return db\r\n        .allDocs({\r\n          startkey: sql.table + \"/\",\r\n          endkey: sql.table + \"/\\uffff\",\r\n          include_docs: true,\r\n        })\r\n        .then(normalize)\r\n        .then(wheres(sql.wheres))\r\n        .then((docs) =>\r\n          db.bulkDocs(\r\n            docs.map((doc) => {\r\n              for (let value of sql.values) {\r\n                doc[value.column] = value.value;\r\n              }\r\n\r\n              return doc;\r\n            })\r\n          )\r\n        )\r\n        .then((results) => ({\r\n          affected: results.filter((result) => result.ok).length,\r\n        }));\r\n    },\r\n\r\n    \"pouchdb.delete\": function (options) {\r\n      const parsed = this.parse(options);\r\n      const db = dmx.pouchdb.get(parsed.connection);\r\n      const sql = parsed.sql;\r\n\r\n      return db\r\n        .allDocs({\r\n          startkey: sql.table + \"/\",\r\n          endkey: sql.table + \"/\\uffff\",\r\n          include_docs: true,\r\n        })\r\n        .then(normalize)\r\n        .then(wheres(sql.wheres))\r\n        .then((docs) =>\r\n          db.bulkDocs(\r\n            docs.map((doc) => {\r\n              return { _deleted: true, _id: doc._id, _rev: doc._rev };\r\n            })\r\n          )\r\n        )\r\n        .then((results) => ({\r\n          affected: results.filter((result) => result.ok).length,\r\n        }));\r\n    },\r\n\r\n    \"pouchdb.get\": function (options) {\r\n      const { connection, docId, attachments } = this.parse(options);\r\n      const db = dmx.pouchdb.get(connection);\r\n\r\n      return db.get(docId, { attachments });\r\n    },\r\n\r\n    \"pouchdb.getAttachment\": function (options) {\r\n      const { connection, docId, name } = this.parse(options);\r\n      const db = dmx.pouchdb.get(connection);\r\n\r\n      return db.getAttachment(docId, name).then((blob) => {\r\n        return dmx.fileUtils.blobToDataURL(blob);\r\n      });\r\n    },\r\n\r\n    \"pouchdb.putAttachment\": function (options) {\r\n      const { connection, docId, name, dataURL } = this.parse(options);\r\n      const { data, type } = dmx.fileUtils.parseDataURL(dataURL);\r\n      const db = dmx.pouchdb.get(connection);\r\n      const doc = db.get(docId);\r\n\r\n      return db.putAttachment(doc._id, name, doc._rev, data, type);\r\n    },\r\n\r\n    \"pouchdb.removeAttachment\": function (options) {\r\n      const { connection, docId, name } = this.parse(options);\r\n      const db = dmx.pouchdb.get(connection);\r\n      const doc = db.get(docId);\r\n\r\n      return db.removeAttachment(doc._id, name, doc._rev);\r\n    },\r\n\r\n  });\r\n})();\r\n","dmx.Component('pouchdb', {\r\n\r\n  attributes: {\r\n    db: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    replicateFrom (remote) {\r\n      return this._db.replicate.from(dmx.pouchdb.get(remote));\r\n    },\r\n\r\n    replicateTo (remote) {\r\n      return this._db.replicate.to(dmx.pouchdb.get(remote));\r\n    },\r\n  },\r\n\r\n  events: {\r\n    change: Event,\r\n    error: Event,\r\n    sync: Event,\r\n  },\r\n\r\n  init () {\r\n    document.addEventListener('pouchdb:sync', (event) => {\r\n      if (event.detail.database === this.props.db) {\r\n        this.dispatchEvent('sync', null, event.detail.change);\r\n      }\r\n    });\r\n\r\n    document.addEventListener('pouchdb:error', (event) => {\r\n      if (event.detail.database === this.props.db) {\r\n        this.dispatchEvent('error', null, event.detail.change);\r\n      }\r\n    });\r\n\r\n    this._initDatabase();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('db')) {\r\n      this._initDatabase();\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    if (this._changes) {\r\n      this._changes.cancel();\r\n      this._changes = null;\r\n    }\r\n  },\r\n\r\n  _initDatabase () {\r\n    if (this._changes) this._changes.cancel();\r\n\r\n    if (this.props.db) {\r\n      this._db = dmx.pouchdb.get(this.props.db);\r\n      this._changes = this._db.changes({\r\n        live: true,\r\n        include_docs: true,\r\n        since: 'now',\r\n      }).on('change', (change) => {\r\n        if (dmx.debug) console.debug(`${this.name}:changes:change`, change);\r\n        this.dispatchEvent('change', null, change);\r\n      }).on('error', (err) => {\r\n        if (dmx.debug) console.debug(`${this.name}:changes:error`, err);\r\n        this.dispatchEvent('error', null, err);\r\n      });\r\n    }\r\n  }\r\n  \r\n});","dmx.Component('pouchdb-view', {\r\n\r\n  initialData: {\r\n    data: [],\r\n    page: 1,\r\n    pages: 1,\r\n    items: 0,\r\n    sort: { on: '', dir: 'asc' },\r\n    has: { first: false, prev: false, next: false, last: false },\r\n  },\r\n\r\n  attributes: {\r\n    db: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    collection: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    filter: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    page: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n\r\n    pagesize: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n\r\n    sorton: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    sortdir: {\r\n      type: String,\r\n      default: 'asc',\r\n      enum: ['asc', 'desc'],\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    select (page) {\r\n      this._updatePage(+page);\r\n    },\r\n\r\n    first () {\r\n      this._updatePage(1);\r\n    },\r\n\r\n    prev () {\r\n      this._updatePage(this.data.page - 1);\r\n    },\r\n\r\n    next () {\r\n      this._updatePage(this.data.page + 1);\r\n    },\r\n\r\n    last () {\r\n      this._updatePage(this.data.pages);\r\n    },\r\n\r\n    sort (prop, dir) {\r\n      this.props.sorton = prop;\r\n      this.props.sortdir = (dir && dir.toLowerCase() == 'desc' ? 'desc' : 'asc');\r\n    },\r\n  },\r\n\r\n  events: {\r\n    change: Event,\r\n    updated: Event,\r\n    error: Event,\r\n  },\r\n\r\n  init () {\r\n    this._docs = [];\r\n    this._items = [];\r\n    this._initDatabase();\r\n\r\n    if (this.props.filter) {\r\n      this._updateFilter();\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('db')) {\r\n      this._initDatabase();\r\n    } else if (updatedProps.has('collection')) {\r\n      this._updateDocs();\r\n    } else if (updatedProps.has('filter')) {\r\n      this._updateFilter();\r\n    } else if (updatedProps.has('sorton') || updatedProps.has('sortdir')) {\r\n      this._updateData();\r\n    } else if (updatedProps.has('page') || updatedProps.has('pagesize')) {\r\n      this._updatePage(this.props.page);\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    if (this._changes) {\r\n      this._changes.cancel();\r\n      this._changes = null;\r\n    }\r\n\r\n    if (this._filterEffect) {\r\n      this._filterEffect();\r\n      this._filterEffect = null;\r\n    }\r\n  },\r\n\r\n  _initDatabase () {\r\n    this._db = null;\r\n\r\n    if (this._changes) {\r\n      this._changes.cancel();\r\n    }\r\n\r\n    if (this.props.db) {\r\n      this._db = dmx.pouchdb.get(this.props.db);\r\n\r\n      this._changes = this._db.changes({\r\n        live: true,\r\n        include_docs: true,\r\n        since: 'now',\r\n        filter: (doc) => doc._id.startsWith(this.props.collection + '/'),\r\n      }).on('change', (change) => {\r\n        if (dmx.debug) console.debug(`${this.name}:changes:change`, change);\r\n        this._updateDocs();\r\n        this.dispatchEvent('change', null, change);\r\n      }).on('error', (err) => {\r\n        if (dmx.debug) console.debug(`${this.name}:changes:error`, err);\r\n        this.dispatchEvent('error', null, err);\r\n      });\r\n\r\n      if (this.props.page > 1) {\r\n        this.set('page', this.props.page);\r\n      }\r\n      \r\n      this._updateDocs();\r\n    }\r\n  },\r\n\r\n  _updateDocs () {\r\n    if (!this._db) return;\r\n\r\n    const { collection } = this.props;\r\n\r\n    if (collection) {\r\n      this._db.allDocs({\r\n        startkey: collection + \"/\",\r\n        endkey: collection + \"/\\uffff\",\r\n        include_docs: true,\r\n      }).then(result => result.rows.map(row => row.doc)).then(docs => {\r\n        if (dmx.debug) console.debug(`${this.name}:query:result`, docs);\r\n        this._docs = docs;\r\n        this._updateData();\r\n        dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n      }).catch(err => {\r\n        if (dmx.debug) console.debug(`${this.name}:query:error`, err);\r\n        this.dispatchEvent('error', null, err);\r\n      });\r\n    } else {\r\n      this._docs = [];\r\n      this._updateData();\r\n      dmx.nextTick(() => this.dispatchEvent(\"updated\"));\r\n    }\r\n  },\r\n\r\n  _updateFilter () {\r\n    if (this._filterEffect) {\r\n      this._filterEffect();\r\n      this._filterEffect = null;\r\n    }\r\n\r\n    if (this.props.filter) {\r\n      this._filterEffect = dmx.effect(() => {\r\n        dmx.parse(this.props.filter, this);\r\n        this._updateData();\r\n      });\r\n    }\r\n  },\r\n\r\n  _updateData () {\r\n    this._items = this._docs;\r\n    \r\n    if (this.props.filter) {\r\n      this._items = this._docs.filter(doc => {\r\n        return dmx.parse(this.props.filter, dmx.DataScope(doc, this));\r\n      });\r\n    }\r\n\r\n    let { sorton, sortdir, pagesize } = this.props;\r\n    let items = this._items.length;\r\n    let pages = pagesize ? Math.max(1, Math.ceil(items / pagesize)) : 1;\r\n    \r\n    if (sorton) {\r\n      const rev = sortdir === 'desc';\r\n      \r\n      this._items.sort((a, b) => {\r\n        if (rev) {\r\n          return a[sorton] > b[sorton] ? -1 : a[sorton] < b[sorton] ? 1 : 0;\r\n        } else {\r\n          return a[sorton] < b[sorton] ? -1 : a[sorton] > b[sorton] ? 1 : 0;\r\n        }\r\n      });\r\n    }\r\n\r\n    this.set({\r\n      pages, items,\r\n    });\r\n\r\n    this._updatePage(this.data.page || this.props.page);\r\n  },\r\n\r\n  _updatePage (page) {\r\n    const size = this.props.pagesize;\r\n    const pages = this.data.pages;\r\n\r\n    page = page < 1 ? 1 : page > pages ? pages : page;\r\n\r\n    const offset = (page - 1) * size;\r\n\r\n    this.set({\r\n      page: page,\r\n      data: size ? this._items.slice(offset, offset + size) : this._items,\r\n      has: {\r\n        first: page > 1,\r\n        prev: page > 1,\r\n        next: page < pages,\r\n        last: page < pages,\r\n      },\r\n    });\r\n  }\r\n\r\n});","dmx.Component('pouchdb-detail', {\r\n\r\n  initialData: {\r\n    data: {},\r\n    stale: false,\r\n  },\r\n\r\n  attributes: {\r\n    db: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    docid: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n\r\n    attachments: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    autoupdate: {\r\n      type: Boolean,\r\n      default: false,\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    select (docid) {\r\n      this.props.docid = docid;\r\n    },\r\n\r\n    refresh () {\r\n      this._getDoc(this.props.docid);\r\n    },\r\n  },\r\n\r\n  events: {\r\n    change: Event,\r\n    error: Event,\r\n  },\r\n\r\n  init () {\r\n    if (this.props.db) {\r\n      this._initDatabase();\r\n    }\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('db')) {\r\n      this._initDatabase();\r\n    } else {\r\n      this._getDoc();\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this._cancelChanges();\r\n  },\r\n\r\n  _initDatabase () {\r\n    this._cancelChanges();\r\n\r\n    if (!this.props.db) {\r\n      this._db = null;\r\n      return;\r\n    }\r\n\r\n    this._db = dmx.pouchdb.get(this.props.db);\r\n\r\n    if (this.props.docid) {\r\n      this._getDoc();\r\n    }\r\n  },\r\n\r\n  _getDoc () {\r\n    this._cancelChanges();\r\n\r\n    if (!this._db) return;\r\n\r\n    if (this.props.docid) {\r\n      this._db.get(this.props.docid, { attachments: this.props.attachments }).then((doc) => {\r\n        this.set({\r\n          data: doc,\r\n          stale: false,\r\n        });\r\n      });  \r\n\r\n      this._changes = this._db.changes({\r\n        live: true,\r\n        include_docs: true,\r\n        attachments: this.props.attachments,\r\n        since: 'now',\r\n        doc_ids: [this.props.docid],\r\n      }).on('change', (change) => {\r\n        if (dmx.debug) console.debug(`${this.name}:changes:change`, change);\r\n        if (this.props.autoupdate) {\r\n          this.set({\r\n            data: change.doc,\r\n            stale: false,\r\n          });\r\n        } else {\r\n          this.set('stale', true);\r\n        }\r\n        this.dispatchEvent('change', null, change);\r\n      }).on('error', (err) => {\r\n        if (dmx.debug) console.debug(`${this.name}:changes:error`, err);\r\n        this.set({\r\n          data: {},\r\n          stale: true,\r\n        });\r\n        this.dispatchEvent('error', null, err);\r\n      });\r\n    } else {\r\n      this.set({\r\n        data: {},\r\n        stale: false,\r\n      });\r\n    }\r\n  },\r\n\r\n  _cancelChanges () {\r\n    if (this._changes) {\r\n      if (dmx.debug) {\r\n        console.log('cancel changes', this._changes);\r\n      }\r\n      \r\n      this._changes.cancel();\r\n      this._changes = null;\r\n    }\r\n  },\r\n\r\n});"]}